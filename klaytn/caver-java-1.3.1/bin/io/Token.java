package io;

import com.klaytn.caver.Caver;
import com.klaytn.caver.crypto.KlayCredentials;
import com.klaytn.caver.methods.response.KlayLogs;
import com.klaytn.caver.methods.response.KlayTransactionReceipt;
import com.klaytn.caver.tx.SmartContract;
import com.klaytn.caver.tx.manager.TransactionManager;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated smart contract code.
 * <p><strong>Do not modify!</strong>
 */
public class MCCToken extends SmartContract {
    private static final String BINARY = "0x60806040526000600560156101000a81548160ff0219169083151502179055503480156200002c57600080fd5b506040516200382d3803806200382d833981810160405260e08110156200005257600080fd5b8101908080519060200190929190805160405193929190846401000000008211156200007d57600080fd5b838201915060208201858111156200009457600080fd5b8251866001820283011164010000000082111715620000b257600080fd5b8083526020830192505050908051906020019080838360005b83811015620000e8578082015181840152602081019050620000cb565b50505050905090810190601f168015620001165780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200013a57600080fd5b838201915060208201858111156200015157600080fd5b82518660018202830111640100000000821117156200016f57600080fd5b8083526020830192505050908051906020019080838360005b83811015620001a557808201518184015260208101905062000188565b50505050905090810190601f168015620001d35780820380516001836020036101000a031916815260200191505b50604052602001805190602001909291908051906020019092919080519060200190929190805190602001909291905050508585858483838383838383826003908051906020019062000228929190620007f3565b50816004908051906020019062000241929190620007f3565b5080600560006101000a81548160ff021916908360ff16021790555050505062000270620003c560201b60201c565b600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36200033e81620003cd60201b60201c565b505050505050505080600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620003b883620003ac8660ff16600a0a8a6200051560201b62002ca31790919060201c565b620005a060201b60201c565b50505050505050620008a2565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141562000455576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180620037e66026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000808314156200052a57600090506200059a565b60008284029050828482816200053c57fe5b041462000595576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806200380c6021913960400191505060405180910390fd5b809150505b92915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141562000644576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f45524332303a206d696e7420746f20746865207a65726f20616464726573730081525060200191505060405180910390fd5b62000660816002546200076a60201b6200257c1790919060201c565b600281905550620006be816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546200076a60201b6200257c1790919060201c565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600080828401905083811015620007e9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200083657805160ff191683800117855562000867565b8280016001018555821562000867579182015b828111156200086657825182559160200191906001019062000849565b5b5090506200087691906200087a565b5090565b6200089f91905b808211156200089b57600081600090555060010162000881565b5090565b90565b612f3480620008b26000396000f3fe6080604052600436106102045760003560e01c806370a0823111610118578063a74add0e116100a0578063df50afa41161006f578063df50afa414610d14578063e416881014610d51578063e8438d9414610dba578063ef04de0514610e23578063f2fde38b14610e5457610204565b8063a74add0e14610b47578063a9059cbb14610beb578063d6526f2214610c5e578063dd62ed3e14610c8f57610204565b80638f32d59b116100e75780638f32d59b1461095957806395d89b4114610988578063a24ed4e514610a18578063a4295fbe14610a83578063a457c2d714610ad457610204565b806370a082311461082f578063715018a6146108945780638b9b1ac1146108ab5780638da5cb5b1461090257610204565b806325bb19af1161019b578063395093511161016a5780633950935114610688578063481c6a75146106fb57806357ee7f6a14610752578063590e1ae3146107bb5780636bd76c27146107d257610204565b806325bb19af146104a95780632660d70414610513578063313ce5671461057c57806335bce6e4146105ad57610204565b806315ba89da116101d757806315ba89da1461038b57806318160ddd146103bc5780632185810b146103e757806323b872dd1461041657610204565b806306fdde0314610206578063095ea7b314610296578063115e8dee1461030957806313af40351461033a575b005b34801561021257600080fd5b5061021b610ea5565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561025b578082015181840152602081019050610240565b50505050905090810190601f1680156102885780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102a257600080fd5b506102ef600480360360408110156102b957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610f47565b604051808215151515815260200191505060405180910390f35b34801561031557600080fd5b5061031e611058565b604051808260ff1660ff16815260200191505060405180910390f35b34801561034657600080fd5b506103896004803603602081101561035d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061105d565b005b34801561039757600080fd5b506103a061116f565b604051808260ff1660ff16815260200191505060405180910390f35b3480156103c857600080fd5b506103d1611174565b6040518082815260200191505060405180910390f35b3480156103f357600080fd5b506103fc61117e565b604051808215151515815260200191505060405180910390f35b34801561042257600080fd5b5061048f6004803603606081101561043957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611191565b604051808215151515815260200191505060405180910390f35b3480156104b557600080fd5b50610511600480360360608110156104cc57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560ff1690602001909291908035151590602001909291905050506112a4565b005b34801561051f57600080fd5b506105626004803603602081101561053657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061141d565b604051808215151515815260200191505060405180910390f35b34801561058857600080fd5b5061059161143d565b604051808260ff1660ff16815260200191505060405180910390f35b3480156105b957600080fd5b50610686600480360360408110156105d057600080fd5b81019080803590602001906401000000008111156105ed57600080fd5b8201836020820111156105ff57600080fd5b8035906020019184602083028401116401000000008311171561062157600080fd5b90919293919293908035906020019064010000000081111561064257600080fd5b82018360208201111561065457600080fd5b8035906020019184602083028401116401000000008311171561067657600080fd5b9091929391929390505050611454565b005b34801561069457600080fd5b506106e1600480360360408110156106ab57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506117d0565b604051808215151515815260200191505060405180910390f35b34801561070757600080fd5b50610710611883565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561075e57600080fd5b506107a16004803603602081101561077557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506118ad565b604051808215151515815260200191505060405180910390f35b3480156107c757600080fd5b506107d0611903565b005b3480156107de57600080fd5b5061082d600480360360408110156107f557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035151590602001909291905050506119a1565b005b34801561083b57600080fd5b5061087e6004803603602081101561085257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a76565b6040518082815260200191505060405180910390f35b3480156108a057600080fd5b506108a9611abe565b005b3480156108b757600080fd5b506108c0611bf9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561090e57600080fd5b50610917611c23565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561096557600080fd5b5061096e611c4d565b604051808215151515815260200191505060405180910390f35b34801561099457600080fd5b5061099d611cac565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156109dd5780820151818401526020810190506109c2565b50505050905090810190601f168015610a0a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610a2457600080fd5b50610a6760048036036020811015610a3b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d4e565b604051808260ff1660ff16815260200191505060405180910390f35b348015610a8f57600080fd5b50610ad260048036036020811015610aa657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611e10565b005b348015610ae057600080fd5b50610b2d60048036036040811015610af757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611f11565b604051808215151515815260200191505060405180910390f35b610be9600480360360a0811015610b5d57600080fd5b81019080803590602001909291908035906020019092919080359060200190929190803560ff16906020019092919080359060200190640100000000811115610ba557600080fd5b820183602082011115610bb757600080fd5b80359060200191846001830284011164010000000083111715610bd957600080fd5b9091929391929390505050611fde565b005b348015610bf757600080fd5b50610c4460048036036040811015610c0e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506120a9565b604051808215151515815260200191505060405180910390f35b348015610c6a57600080fd5b50610c736121ba565b604051808260ff1660ff16815260200191505060405180910390f35b348015610c9b57600080fd5b50610cfe60048036036040811015610cb257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506121bf565b6040518082815260200191505060405180910390f35b348015610d2057600080fd5b50610d4f60048036036020811015610d3757600080fd5b81019080803515159060200190929190505050612246565b005b348015610d5d57600080fd5b50610da060048036036020811015610d7457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612318565b604051808215151515815260200191505060405180910390f35b348015610dc657600080fd5b50610e0960048036036020811015610ddd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612338565b604051808215151515815260200191505060405180910390f35b348015610e2f57600080fd5b50610e38612358565b604051808260ff1660ff16815260200191505060405180910390f35b348015610e6057600080fd5b50610ea360048036036020811015610e7757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061235d565b005b606060038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f3d5780601f10610f1257610100808354040283529160200191610f3d565b820191906000526020600020905b815481529060010190602001808311610f2057829003601f168201915b5050505050905090565b60003383600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16158015610fef5750600760008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b611044576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526031815260200180612df26031913960400191505060405180910390fd5b61104e85856123e3565b9250505092915050565b600181565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611120576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f6d73672e73656e646572206973206e6f7420746f6b656e206d616e616765720081525060200191505060405180910390fd5b61112981612401565b8073ffffffffffffffffffffffffffffffffffffffff167f167d3e9c1016ab80e58802ca9da10ce5c6a0f4debc46a2e7a2cd9e56899a4fb560405160405180910390a250565b600281565b6000600254905090565b600560159054906101000a900460ff1681565b60008383600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161580156112395750600760008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b61128e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526031815260200180612df26031913960400191505060405180910390fd5b611299868686612547565b925050509392505050565b6112ac611c4d565b61131e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b8160ff16600160ff161115801561133c57508160ff16600360ff1610155b61134557600080fd5b600260ff168260ff16106113b15780600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506002820391505b600160ff168260ff1614156114185780600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b505050565b600a6020528060005260406000206000915054906101000a900460ff1681565b6000600560009054906101000a900460ff16905090565b600560159054906101000a900460ff1661146d57600080fd5b33600a60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611510576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526037815260200180612dbb6037913960400191505060405180910390fd5b600660008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156115d0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f7468652073656e6465722061646472657373206973206c696d6974656400000081525060200191505060405180910390fd5b600080905060008090505b8686905081101561176357600760008888848181106115f657fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156116ce576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f7468652072656365697665722061646472657373206973206c696d697465640081525060200191505060405180910390fd5b6116f38585838181106116dd57fe5b905060200201358361257c90919063ffffffff16565b9150816116ff33611a76565b1015611756576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180612e6c6026913960400191505060405180910390fd5b80806001019150506115db565b5060008090505b868690508110156117c7576117b987878381811061178457fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168686848181106117ad57fe5b905060200201356120a9565b50808060010191505061176a565b50505050505050565b60006118796117dd612604565b8461187485600160006117ee612604565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461257c90919063ffffffff16565b61260c565b6001905092915050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b61190b611c4d565b61197d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b61199f30333073ffffffffffffffffffffffffffffffffffffffff1631612803565b565b6119a9611c4d565b611a1b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b611ac6611c4d565b611b38576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611c90612604565b73ffffffffffffffffffffffffffffffffffffffff1614905090565b606060048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611d445780601f10611d1957610100808354040283529160200191611d44565b820191906000526020600020905b815481529060010190602001808311611d2757829003601f168201915b5050505050905090565b60008060009050600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611dae576001810190505b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611e07576002810190505b80915050919050565b611e18611c4d565b611e8a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167fa36656856dbab9be9c2cf20552c68451a469124a9b8a6385e9142606e0a753ed60405160405180910390a250565b6000611fd4611f1e612604565b84611fcf85604051806060016040528060258152602001612edb6025913960016000611f48612604565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612ab99092919063ffffffff16565b61260c565b6001905092915050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146120a1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f6d73672e73656e646572206973206e6f742073656564207075626c697368657281525060200191505060405180910390fd5b505050505050565b60003383600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161580156121515750600760008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b6121a6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526031815260200180612df26031913960400191505060405180910390fd5b6121b08585612b79565b9250505092915050565b600381565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b61224e611c4d565b6122c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600560156101000a81548160ff0219169083151502179055507fbac956a1816a25b65e25a2449379c8409891b96663ce5f0b3475c196ec4bfa0f81604051808215151515815260200191505060405180910390a150565b60066020528060005260406000206000915054906101000a900460ff1681565b60076020528060005260406000206000915054906101000a900460ff1681565b600081565b612365611c4d565b6123d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6123e081612401565b50565b60006123f76123f0612604565b848461260c565b6001905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612487576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180612d4d6026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600560159054906101000a900460ff1661256257600080fd5b600061256f858585612bac565b9050809150509392505050565b6000808284019050838110156125fa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612692576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526024815260200180612eb76024913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612718576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180612d736022913960400191505060405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612889576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180612e926025913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561290f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180612d2a6023913960400191505060405180910390fd5b61297a81604051806060016040528060268152602001612d95602691396000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612ab99092919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612a0d816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461257c90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6000838311158290612b66576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612b2b578082015181840152602081019050612b10565b50505050905090810190601f168015612b585780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b6000600560159054906101000a900460ff16612b9457600080fd5b6000612ba08484612c85565b90508091505092915050565b6000612bb9848484612803565b612c7a84612bc5612604565b612c7585604051806060016040528060288152602001612e4460289139600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000612c2b612604565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612ab99092919063ffffffff16565b61260c565b600190509392505050565b6000612c99612c92612604565b8484612803565b6001905092915050565b600080831415612cb65760009050612d23565b6000828402905082848281612cc757fe5b0414612d1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180612e236021913960400191505060405180910390fd5b809150505b9291505056fe45524332303a207472616e7366657220746f20746865207a65726f20616464726573734f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63657468652073656e6465722061646472657373206973206e6f74206f6e206d756c74695472616e7366657253656e64657257616c6c6574734f6e65206f7220626f74682061646472657373657320617265206c696d6974656420666f72207472616e73666572696e67536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7745524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63657468652073656e64657220646f65736e2774206861766520656e6f7567682062616c616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa265627a7a7231582094409b6919307f9e4a33eb0f444e19fc5a51d1254da80585552ca5aa166daaf364736f6c634300050c00324f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77";

    public static final String FUNC_LIMITED_ALL = "LIMITED_ALL";

    public static final String FUNC_LIMITED_NONE = "LIMITED_NONE";

    public static final String FUNC_LIMITED_RECEIVER = "LIMITED_RECEIVER";

    public static final String FUNC_LIMITED_SENDER = "LIMITED_SENDER";

    public static final String FUNC_ALLOWTRANSFERS = "allowTransfers";

    public static final String FUNC_ALLOWANCE = "allowance";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_DECIMALS = "decimals";

    public static final String FUNC_DECREASEALLOWANCE = "decreaseAllowance";

    public static final String FUNC_INCREASEALLOWANCE = "increaseAllowance";

    public static final String FUNC_ISLIMITEDWALLETADDRESS = "isLimitedWalletAddress";

    public static final String FUNC_ISOWNER = "isOwner";

    public static final String FUNC_LIMITEDRECEIVERWALLETS = "limitedReceiverWallets";

    public static final String FUNC_LIMITEDSENDERWALLETS = "limitedSenderWallets";

    public static final String FUNC_MULTITRANSFERSENDERWALLETS = "multiTransferSenderWallets";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_SETALLOWTRANSFERS = "setAllowTransfers";

    public static final String FUNC_SETLIMITEDWALLETADDRESS = "setLimitedWalletAddress";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_GOODMORN = "goodmorn";

    public static final String FUNC_REFUND = "refund";

    public static final String FUNC_SETOWNER = "setOwner";

    public static final String FUNC_MANAGER = "manager";

    public static final String FUNC_SETSEEDPUBLISHER = "setSeedPublisher";

    public static final String FUNC_SEEDPUBLISHER = "seedPublisher";

    public static final String FUNC_SETMULTITRANSFERSENDERWALLETADDRESS = "setMultiTransferSenderWalletAddress";

    public static final String FUNC_ISMULTITRANSFERSENDERWALLETADDRESS = "isMultiTransferSenderWalletAddress";

    public static final String FUNC_TRANSFERMULTI = "transferMulti";

    public static final Event ALLOWTRANSFERSCHANGED_EVENT = new Event("AllowTransfersChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    ;

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event BURN_EVENT = new Event("Burn", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DESTROY_EVENT = new Event("Destroy", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event SETOWNER_EVENT = new Event("SetOwner", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event SETSEEDPUBLISHER_EVENT = new Event("SetSeedPublisher", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    protected MCCToken(String contractAddress, Caver caver, KlayCredentials credentials, int chainId, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, caver, credentials, chainId, contractGasProvider);
    }

    protected MCCToken(String contractAddress, Caver caver, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, caver, transactionManager, contractGasProvider);
    }

    public List<AllowTransfersChangedEventResponse> getAllowTransfersChangedEvents(KlayTransactionReceipt.TransactionReceipt transactionReceipt) {
        List<SmartContract.EventValuesWithLog> valueList = extractEventParametersWithLog(ALLOWTRANSFERSCHANGED_EVENT, transactionReceipt);
        ArrayList<AllowTransfersChangedEventResponse> responses = new ArrayList<AllowTransfersChangedEventResponse>(valueList.size());
        for (SmartContract.EventValuesWithLog eventValues : valueList) {
            AllowTransfersChangedEventResponse typedResponse = new AllowTransfersChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._newState = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<ApprovalEventResponse> getApprovalEvents(KlayTransactionReceipt.TransactionReceipt transactionReceipt) {
        List<SmartContract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (SmartContract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<BurnEventResponse> getBurnEvents(KlayTransactionReceipt.TransactionReceipt transactionReceipt) {
        List<SmartContract.EventValuesWithLog> valueList = extractEventParametersWithLog(BURN_EVENT, transactionReceipt);
        ArrayList<BurnEventResponse> responses = new ArrayList<BurnEventResponse>(valueList.size());
        for (SmartContract.EventValuesWithLog eventValues : valueList) {
            BurnEventResponse typedResponse = new BurnEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.burner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<DestroyEventResponse> getDestroyEvents(KlayTransactionReceipt.TransactionReceipt transactionReceipt) {
        List<SmartContract.EventValuesWithLog> valueList = extractEventParametersWithLog(DESTROY_EVENT, transactionReceipt);
        ArrayList<DestroyEventResponse> responses = new ArrayList<DestroyEventResponse>(valueList.size());
        for (SmartContract.EventValuesWithLog eventValues : valueList) {
            DestroyEventResponse typedResponse = new DestroyEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(KlayTransactionReceipt.TransactionReceipt transactionReceipt) {
        List<SmartContract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (SmartContract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<SetOwnerEventResponse> getSetOwnerEvents(KlayTransactionReceipt.TransactionReceipt transactionReceipt) {
        List<SmartContract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETOWNER_EVENT, transactionReceipt);
        ArrayList<SetOwnerEventResponse> responses = new ArrayList<SetOwnerEventResponse>(valueList.size());
        for (SmartContract.EventValuesWithLog eventValues : valueList) {
            SetOwnerEventResponse typedResponse = new SetOwnerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<SetSeedPublisherEventResponse> getSetSeedPublisherEvents(KlayTransactionReceipt.TransactionReceipt transactionReceipt) {
        List<SmartContract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETSEEDPUBLISHER_EVENT, transactionReceipt);
        ArrayList<SetSeedPublisherEventResponse> responses = new ArrayList<SetSeedPublisherEventResponse>(valueList.size());
        for (SmartContract.EventValuesWithLog eventValues : valueList) {
            SetSeedPublisherEventResponse typedResponse = new SetSeedPublisherEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._seedPublisher = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<TransferEventResponse> getTransferEvents(KlayTransactionReceipt.TransactionReceipt transactionReceipt) {
        List<SmartContract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (SmartContract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public RemoteCall<BigInteger> LIMITED_ALL() {
        final Function function = new Function(FUNC_LIMITED_ALL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> LIMITED_NONE() {
        final Function function = new Function(FUNC_LIMITED_NONE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> LIMITED_RECEIVER() {
        final Function function = new Function(FUNC_LIMITED_RECEIVER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> LIMITED_SENDER() {
        final Function function = new Function(FUNC_LIMITED_SENDER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Boolean> allowTransfers() {
        final Function function = new Function(FUNC_ALLOWTRANSFERS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<BigInteger> allowance(String owner, String spender) {
        final Function function = new Function(FUNC_ALLOWANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner), 
                new org.web3j.abi.datatypes.Address(spender)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<KlayTransactionReceipt.TransactionReceipt> approve(String _spender, BigInteger _value) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_spender), 
                new org.web3j.abi.datatypes.generated.Uint256(_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> balanceOf(String account) {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> decimals() {
        final Function function = new Function(FUNC_DECIMALS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<KlayTransactionReceipt.TransactionReceipt> decreaseAllowance(String spender, BigInteger subtractedValue) {
        final Function function = new Function(
                FUNC_DECREASEALLOWANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(spender), 
                new org.web3j.abi.datatypes.generated.Uint256(subtractedValue)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<KlayTransactionReceipt.TransactionReceipt> increaseAllowance(String spender, BigInteger addedValue) {
        final Function function = new Function(
                FUNC_INCREASEALLOWANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(spender), 
                new org.web3j.abi.datatypes.generated.Uint256(addedValue)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> isLimitedWalletAddress(String _wallet) {
        final Function function = new Function(FUNC_ISLIMITEDWALLETADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_wallet)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Boolean> isOwner() {
        final Function function = new Function(FUNC_ISOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Boolean> limitedReceiverWallets(String param0) {
        final Function function = new Function(FUNC_LIMITEDRECEIVERWALLETS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Boolean> limitedSenderWallets(String param0) {
        final Function function = new Function(FUNC_LIMITEDSENDERWALLETS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Boolean> multiTransferSenderWallets(String param0) {
        final Function function = new Function(FUNC_MULTITRANSFERSENDERWALLETS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<KlayTransactionReceipt.TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<KlayTransactionReceipt.TransactionReceipt> setAllowTransfers(Boolean _allowTransfers) {
        final Function function = new Function(
                FUNC_SETALLOWTRANSFERS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Bool(_allowTransfers)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<KlayTransactionReceipt.TransactionReceipt> setLimitedWalletAddress(String _wallet, BigInteger targetStatus, Boolean registration) {
        final Function function = new Function(
                FUNC_SETLIMITEDWALLETADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_wallet), 
                new org.web3j.abi.datatypes.generated.Uint8(targetStatus), 
                new org.web3j.abi.datatypes.Bool(registration)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> totalSupply() {
        final Function function = new Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<KlayTransactionReceipt.TransactionReceipt> transfer(String _to, BigInteger _value) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.generated.Uint256(_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<KlayTransactionReceipt.TransactionReceipt> transferFrom(String _from, String _to, BigInteger _value) {
        final Function function = new Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_from), 
                new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.generated.Uint256(_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<KlayTransactionReceipt.TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<KlayTransactionReceipt.TransactionReceipt> goodmorn(BigInteger refKey, BigInteger from, BigInteger to, BigInteger seed, String penalty, BigInteger pebValue) {
        final Function function = new Function(
                FUNC_GOODMORN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(refKey), 
                new org.web3j.abi.datatypes.generated.Uint256(from), 
                new org.web3j.abi.datatypes.generated.Uint256(to), 
                new org.web3j.abi.datatypes.generated.Uint8(seed), 
                new org.web3j.abi.datatypes.Utf8String(penalty)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, pebValue);
    }

    public RemoteCall<KlayTransactionReceipt.TransactionReceipt> refund() {
        final Function function = new Function(
                FUNC_REFUND, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<KlayTransactionReceipt.TransactionReceipt> setOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> manager() {
        final Function function = new Function(FUNC_MANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<KlayTransactionReceipt.TransactionReceipt> setSeedPublisher(String _publisher) {
        final Function function = new Function(
                FUNC_SETSEEDPUBLISHER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_publisher)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> seedPublisher() {
        final Function function = new Function(FUNC_SEEDPUBLISHER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<KlayTransactionReceipt.TransactionReceipt> setMultiTransferSenderWalletAddress(String _wallet, Boolean approval) {
        final Function function = new Function(
                FUNC_SETMULTITRANSFERSENDERWALLETADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_wallet), 
                new org.web3j.abi.datatypes.Bool(approval)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> isMultiTransferSenderWalletAddress(String _wallet) {
        final Function function = new Function(FUNC_ISMULTITRANSFERSENDERWALLETADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_wallet)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<KlayTransactionReceipt.TransactionReceipt> transferMulti(List<String> _targets, List<BigInteger> _values) {
        final Function function = new Function(
                FUNC_TRANSFERMULTI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(_targets, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(_values, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static MCCToken load(String contractAddress, Caver caver, KlayCredentials credentials, int chainId, ContractGasProvider contractGasProvider) {
        return new MCCToken(contractAddress, caver, credentials, chainId, contractGasProvider);
    }

    public static MCCToken load(String contractAddress, Caver caver, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new MCCToken(contractAddress, caver, transactionManager, contractGasProvider);
    }

    public static RemoteCall<MCCToken> deploy(Caver caver, KlayCredentials credentials, int chainId, ContractGasProvider contractGasProvider, BigInteger initialSupply, String _name, String _symbol, BigInteger _decimals, String _exchangeMaster, String _owner, String _manager) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(initialSupply), 
                new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_symbol), 
                new org.web3j.abi.datatypes.generated.Uint8(_decimals), 
                new org.web3j.abi.datatypes.Address(_exchangeMaster), 
                new org.web3j.abi.datatypes.Address(_owner), 
                new org.web3j.abi.datatypes.Address(_manager)));
        return deployRemoteCall(MCCToken.class, caver, credentials, chainId, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<MCCToken> deploy(Caver caver, TransactionManager transactionManager, ContractGasProvider contractGasProvider, BigInteger initialSupply, String _name, String _symbol, BigInteger _decimals, String _exchangeMaster, String _owner, String _manager) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(initialSupply), 
                new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_symbol), 
                new org.web3j.abi.datatypes.generated.Uint8(_decimals), 
                new org.web3j.abi.datatypes.Address(_exchangeMaster), 
                new org.web3j.abi.datatypes.Address(_owner), 
                new org.web3j.abi.datatypes.Address(_manager)));
        return deployRemoteCall(MCCToken.class, caver, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class AllowTransfersChangedEventResponse {
        public KlayLogs.Log log;

        public Boolean _newState;
    }

    public static class ApprovalEventResponse {
        public KlayLogs.Log log;

        public String owner;

        public String spender;

        public BigInteger value;
    }

    public static class BurnEventResponse {
        public KlayLogs.Log log;

        public String burner;

        public BigInteger value;
    }

    public static class DestroyEventResponse {
        public KlayLogs.Log log;

        public String _from;

        public BigInteger _value;
    }

    public static class OwnershipTransferredEventResponse {
        public KlayLogs.Log log;

        public String previousOwner;

        public String newOwner;
    }

    public static class SetOwnerEventResponse {
        public KlayLogs.Log log;

        public String owner;
    }

    public static class SetSeedPublisherEventResponse {
        public KlayLogs.Log log;

        public String _seedPublisher;
    }

    public static class TransferEventResponse {
        public KlayLogs.Log log;

        public String from;

        public String to;

        public BigInteger value;
    }
}
